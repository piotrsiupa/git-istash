#!/usr/bin/env sh

set -e

. "$(dirname "$0")/.git-istash/git-istash-commons"

print_help() {
	printf 'git-istash-pop - Improved version of "git stash pop" that can handle conflicts.\n'
	printf '\n'
	printf 'usage: git istash-pop [<stash>]\n'
	printf '   or: git istash-pop (-c | --continue | --abort)\n'
}

save_data() {
	printf '%s\n' "$stash" >"$stash_data_file"
}
load_data() {
	if [ "$(wc -l <"$stash_data_file")" -ne 1 ]
	then
		printf 'fatal: "%s" is should contain exactly 1 line.\n' "$stash_data_file" 1>&2
		exit 1
	fi
	stash="$(cat "$stash_data_file")"
	if ! [ "$stash" -eq "$stash" ] 2>/dev/null || [ "$stash" -lt 0 ]
	then
		printf 'fatal: "%s" doesn'\''t contain a positive integer.\n' "$stash_data_file" 1>&2
		exit 1
	fi
	if [ "$stash" -ge "$(git rev-list --walk-reflogs --count --ignore-missing refs/stash)" ]
	then
		printf 'fatal: "%s" says "%i" but there is no such stash.\n' "$stash_data_file" "$stash" 1>&2
		exit 1
	fi
}
delete_data() {
	rm -f "$stash_data_file"
}

check_args_for_pop() { # max_free_args args...
	check_args 'istash-pop' "$@"
}

end_with_success() {
	delete_data
	git stash drop "$stash"
	printf '\nSuccessfully popped the stash\n'
}

check_data_files() { # resume
	case "$(find_data_files)" in
		pop)
			if [ "$1" = y ] ; then return 0 ; fi
			printf '\n' 1>&2
			if is_color_allowed 2
			then
				printf '\e[33m'
			fi
			printf 'fatal: "git istash-pop" is already in progress?\n' 1>&2
			printf 'hint: Use "git istash-pop --continue" or "git istash-pop --abort".\n' 1>&2
			if is_color_allowed 2
			then
				printf '\e[39m'
			fi
			exit 1
			;;
		apply)
			printf '\n' 1>&2
			if is_color_allowed 2
			then
				printf '\e[33m'
			fi
			printf 'fatal: "git istash-apply" is already in progress?\n' 1>&2
			printf 'hint: Finish that operation before starting "git istash-pop".\n' 1>&2
			if is_color_allowed 2
			then
				printf '\e[39m'
			fi
			exit 1
			;;
		error)
			printf '\n' 1>&2
			if is_color_allowed 2
			then
				printf '\e[31m'
			fi
			printf 'fatal: "git istash-pop" seems to be in progress but "%s" is missing!\n' "$(make_target_data_file)" 1>&2
			if is_color_allowed 2
			then
				printf '\e[33m'
			fi
			printf 'hint: Fix the problem and finish that operation before starting a new one\n' 1>&2
			printf 'hint: or remove the file "%s" to manually cancel it.\n' "$(make_stash_data_file_path)" 1>&2
			if is_color_allowed 2
			then
				printf '\e[39m'
			fi
			exit 1
			;;
		nothing)
			if [ "$1" = n ] ; then return 0 ; fi
			printf 'fatal: No istash-pop in progress?\n' 1>&2
			exit 1
			;;
	esac
}

run_apply() { # args...
	sh "$(dirname "$0")/git-istash-apply" --called-from-pop "$@" || exit 1
}

do_start() { # args...
	check_args_for_pop 1 "$@"
	check_data_files n
	check_repository_state
	find_stash "$@"
	save_data
	run_apply -- "$@"
	end_with_success
}

do_continue() { # args...
	check_args_for_pop 0 "$@"
	check_data_files y
	load_data
	run_apply --continue
	end_with_success
}

do_abort() { # args...
	check_args_for_pop 0 "$@"
	check_data_files y
	load_data
	run_apply --abort
	delete_data
}

do_pop() { # args...
	if [ "$continue_set" = y ]
	then
		do_continue "$@"
	elif [ "$abort_set" = y ]
	then
		do_abort "$@"
	else
		do_start "$@"
	fi
}

getopt_result="$(getopt -o'hc' --long='help,continue,abort' -n"$(basename "$0")" -- "$@")"
eval set -- "$getopt_result"
continue_set=n
abort_set=n
while true
do
	case "$1" in
	-h|--help)
		print_help
		exit 0
		;;
	-c|--continue)
		continue_set=y
		;;
	--abort)
		abort_set=y
		;;
	--)
		shift
		break
		;;
	esac
	shift
done
if [ $continue_set = y ] && [ $abort_set = y ]
then
	printf 'error: Unclear whether to continue aborting or to abort continuing.\n' 1>&2
	exit 1
fi

cd "$(git rev-parse --show-toplevel)"
stash_data_file="$(make_stash_data_file_path)"
do_pop "$@"

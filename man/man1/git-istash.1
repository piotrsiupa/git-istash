.TH GIT-ISTASH 1 "2022-07-22" "git-istash 1.0.1"
.nh
.ad l

.SH NAME
git\-istash \- Handle Git stashes without arbitrary limitations of the original command

.SH SYNOPSIS
.nf
\fBgit istash\fR (create\~|\~snatch\~|\~save\~|\~push) [\-a\~|\~\-\-all] [\-\-allow-empty]
            [\-k\~|\~\-\-[no\-]keep\-index] [\-l\~|\~\-\-leave\-staged]
            [(\-m\~|\~\-\-message)\~<\fImessage\fR>] [\-\-patch]
            [\-\-patchspec\-file\-nul] [\-\-patchspec\-from\-file=<\fIfile\fR>]
            [\-S\~|\~\-\-staged] [\-u\~|\~\-\-[no\-]include\-untracked]
            [\-\-] [<\fIpathspec\fR>...]
\fBgit istash\fR [\-a\~|\~\-\-all] [\-\-allow\-empty] [\-k\~|\~\-\-[no\-]keep\-index]
            [\-l\~|\~\-\-leave\-staged] [(\-m\~|\~\-\-message)\~<\fImessage\fR>] [\-\-patch]
            [\-\-patchspec\-file\-nul] [\-\-patchspec\-from\-file=<\fIfile\fR>]
            [\-S\~|\~\-\-staged] [\-u\~|\~\-\-[no\-]include\-untracked]
            [\-\-\~<\fIpathspec\fR>...]
\fBgit istash\fR (pop\~|\~apply) [<\fIstash\fR>]
\fBgit istash\fR (pop\~|\~apply) (\-\-continue\~|\~\-\-abort)
.fi

.SH DESCRIPTION
\fBgit istash\fR ("improved stash") is an alternative implementation for \fBgit stash\fR, mostly compatible with stash entries created by it (other than special cases in \fBgit stash\fR which are not present in \fBgit istash\fR). \
Use \fBgit istash\fR commands as a replacement for \fBgit stash\fR commands with the same names.
.sp

\fBgit istash create\fR, \fBgit istash snatch\fR, \fBgit istash save\fR and \fBgit istash push\fR:
.RS 4
All of these commands create a new stash entry containing chosen files (specified by options and pathspecs). \
They differ in whether they store the created stash and whether they delete the stashed changed from the working directory.
.TS
box;
c | c | c
r | l | l.
Sub-command	Keeps the changes in WD	Stores the created stash
=
\fBcreate\fR	YES	NO
\fBsnatch\fR	NO (can keep index)	NO
\fBsave\fR	YES	YES
\fBpush\fR	NO (can keep index)	YES
.TE
.br
(\fBgit istash create\fB and \fBgit istash push\fR are very close equivalents of their vanilla counterparts, except for some corner cases and support for various options. \
\fBgit istash snatch\fR and \fBgit istash save\fR have no vanilla euqivalents - there are somewhere half way between \fBcreate\fR and \fBpush\fR.)
.RE

\fBgit istash apply\fR and \fBgit istash pop\fR:
.RS 4
Both of these commands restore stashed changes to the working directory. \
Additionally, \fBgit istash pop\fR removes the stash entry on success.
.br
When there are no conflicts, these work the same as \fBgit stash apply \-\-index\fR and \fBgit stash pop \-\-index\fR. \
In case of conflicts, instead of refusing and demanding to run it without \fB\-\-index\fR, they apply index and working directory changes separately and stop to resolve conflicts when needed, similarly to \fBgit rebase\fR. \
After the conflicts are resolved, the commands can be resumed with \fB\-\-continue\fR. \
Alternatively, \fB\-\-abort\fR can be used to cancel the operation and return to the repository state before it started.
.br
Because of the multi-stage conflict resolution, \fIthe index saved to the stash entry will be preserved\fR (unlike in \fBgit stash\fR equivalent commands).
.RE

.SH COMMANDS

.PP
\fBcreate\fR [\-a\~|\~\-\-all] [\-\-allow\-empty] [\-l\~|\~\-\-leave\-staged] [(\-m\~|\~\-\-message)\~<\fImessage\fR>] [\-\-patch] [\-\-patchspec\-file\-nul] [\-\-patchspec\-from\-file=<\fIfile\fR>] [\-S\~|\~\-\-staged] [\-u\~|\~\-\-[no\-]include\-untracked] [\-\-] [<\fIpathspec\fR>...]
.RS 4
Like \fBgit stash create\fR, except some minor differences and support for options.
.br
Every sensible combination of options is supported (including \fB\-\-all\fR in conjunction with \fB\-\-no\-include\-untracked\fR which results in adding ignored files but leaving non-ignored untracked ones). \
The option \fB\-\-patch\fR works also with untracked files. \
Failing to create a stash is much more reliable especially in the case when there is no files to stash. \
(There is a new option \fB\-\-allow\-empty\fR to bypass that.) \
Stashes can be created on orphan branches. \
The pathspec affect stashed index too. \
And finally, the options \fB\-\-patch\fR and \fB\-\-pathspec\-from\-file\fR are allowed together.
.RE

\fBsnatch\fR [\-a\~|\~\-\-all] [\-\-allow\-empty] [\-k\~|\~\-\-[no\-]keep\-index] [\-l\~|\~\-\-leave\-staged] [(\-m\~|\~\-\-message)\~<\fImessage\fR>] [\-\-patch] [\-\-patchspec\-file\-nul] [\-\-patchspec\-from\-file=<\fIfile\fR>] [\-S\~|\~\-\-staged] [\-u\~|\~\-\-[no\-]include\-untracked] [\-\-] [<\fIpathspec\fR>...]
.RS 4
Same as \fBgit istash push\fR, except the created stash ISN'T STORED.
.br
Every sensible combination of options is supported (including \fB\-\-all\fR in conjunction with \fB\-\-no\-include\-untracked\fR which results in adding ignored files but leaving non-ignored untracked ones). \
The option \fB\-\-patch\fR works also with untracked files. \
Failing to create a stash is much more reliable especially in the case when there is no files to stash. \
(There is a new option \fB\-\-allow\-empty\fR to bypass that.) \
Stashes can be created on orphan branches. \
The pathspec affect stashed index too. \
And finally, the options \fB\-\-patch\fR and \fB\-\-pathspec\-from\-file\fR are allowed together.
.RE

.PP
\fBsave\fR [\-a\~|\~\-\-all] [\-\-allow\-empty] [\-l\~|\~\-\-leave\-staged] [(\-m\~|\~\-\-message)\~<\fImessage\fR>] [\-\-patch] [\-\-patchspec\-file\-nul] [\-\-patchspec\-from\-file=<\fIfile\fR>] [\-S\~|\~\-\-staged] [\-u\~|\~\-\-[no\-]include\-untracked] [\-\-] [<\fIpathspec\fR>...]
.RS 4
This ISN'T equivalent of \fBgit stash save\fR. \
It's similar to \fBgit istash create\fR, except that the created stash is stored.
.br
Every sensible combination of options is supported (including \fB\-\-all\fR in conjunction with \fB\-\-no\-include\-untracked\fR which results in adding ignored files but leaving non-ignored untracked ones). \
The option \fB\-\-patch\fR works also with untracked files. \
Failing to create a stash is much more reliable especially in the case when there is no files to stash. \
(There is a new option \fB\-\-allow\-empty\fR to bypass that.) \
Stashes can be created on orphan branches. \
The pathspec affect stashed index too. \
And finally, the options \fB\-\-patch\fR and \fB\-\-pathspec\-from\-file\fR are allowed together.
.RE

\fBpush\fR [\-a\~|\~\-\-all] [\-\-allow\-empty] [\-k\~|\~\-\-[no\-]keep\-index] [\-l\~|\~\-\-leave\-staged] [(\-m\~|\~\-\-message)\~<\fImessage\fR>] [\-\-patch] [\-\-patchspec\-file\-nul] [\-\-patchspec\-from\-file=<\fIfile\fR>] [\-S\~|\~\-\-staged] [\-u\~|\~\-\-[no\-]include\-untracked] [\-\-] [<\fIpathspec\fR>...]
.RS 4
Like \fBgit stash push\fR, except some minor differences.
.br
Every sensible combination of options is supported (including \fB\-\-all\fR in conjunction with \fB\-\-no\-include\-untracked\fR which results in adding ignored files but leaving non-ignored untracked ones). \
The option \fB\-\-patch\fR works also with untracked files. \
Failing to create a stash is much more reliable especially in the case when there is no files to stash. \
(There is a new option \fB\-\-allow\-empty\fR to bypass that.) \
Stashes can be created on orphan branches. \
The pathspec affect stashed index too. \
And finally, the options \fB\-\-patch\fR and \fB\-\-pathspec\-from\-file\fR are allowed together.
.RE

.PP
\fBapply\fR [<\fIstash\fR>\~|\~\-c\~|\~\-\-continue]
.RS 4
Like \fBgit stash apply \-\-index\fR, but it handles staged and unstaged conflicts separately, preventing those scopes from mixing. \
\fB<stash>\fR may be any commit that looks like a commit created by \fBgit stash push\fR or \fBgit stash create\fR.
.RE

.PP
\fBpop\fR [<\fIstash\fR>\~|\~\-c\~|\~\-\-continue]
.RS 4
Like \fBgit stash pop \-\-index\fR, but it handles staged and unstaged conflicts separately, preventing those scopes from mixing. \
Unlike \fBgit stash pop\fR, it can handle stashes referenced by name (\fBstash^{/<name>}\fR).
.sp
The only differences from \fBgit istash apply\fR are that it cannot use an arbitrary commit as \fB<stash>\fR and it removes the stash entry on success. \
In case of conflicts, the stash is dropped after all conflicts are successfully resolved.
.sp
This is the inverse operation of \fBgit stash push\fR.
.RE

.SH OPTIONS

.PP
\fB\-a\fR, \fB\-\-all\fR
.RS 4
This options is only valid for \fBpush\fR command.
.sp
All ignored and untracked files are also stashed and then removed.
.RE

.PP
\fB\-\-allow\-empty\fR
.RS 4
This options is only valid for \fBpush\fR command.
.sp
Stash is created even if there is no changes or options / pathspec exclude all of them. \
The exit code becomes 0 in such cases.
.RE

.PP
\fB\-k\fR, \fB\-\-keep\-index\fR, \fB\-\-no\-keep\-index\fR
.RS 4
This options is only valid for \fBpush\fR command.
.sp
All changes already added to the index are left intact (but still staged). \
See also \fB\-\-leave\-staged\fR.
.br
(\fB\-\-no\-keep\-index\fR not that useful; it exist mainly to comply with the standard stash command.)
.RE

.PP
\fB\-l\fR, \fB\-\-leave\-staged\fR
.RS 4
This options is only valid for \fBpush\fR command.
.sp
All changes already added to the index are not staged and left intact. \
See also \fB\-\-keep\-index\fR and \fB\-\-staged\fR.
.RE

.PP
\fB\-m\fR <\fImessage\fR>, \fB\-\-message\fR <\fImessage\fR>
.RS 4
This options is only valid for \fBpush\fR command.
.sp
Custom message (name) for stash is used instead of the one generated using the last commit message.
.RE

.PP
\fB\-\-patch\fR
.RS 4
This options is only valid for \fBpush\fR command.
.sp
Interactively select hunks from the diff between HEAD and the working tree to be stashed.
.br
The stash entry is constructed such that its index state is the same as the index state of your repository, and its worktree contains only the changes you selected interactively. \
The selected changes are then rolled back from your worktree. \
See the “Interactive Mode” section of \fBgit\-add\fR(1) to learn how to operate the \fB\-\-patch\fR mode.
.sp
Unlike in the standard \fBgit stash\fR command, the option \fB\-\-keep\-index\fR is \fInot\fR affected.
.RE

.PP
\fB\-\-pathspec\-from\-file\fR=<\fIfile\fR>
.RS 4
This options is only valid for \fBpush\fR command.
.sp
Pathspec is passed in \fB<file>\fR instead of command line arguments. \
If \fB<file>\fR is exactly \fB\-\fR then standard input is used (so this is not allowed with \fB\-\-patch\fR). \
Pathspec elements are separated by LF or CR/LF and are interpreted the same way as the one passed via the command line. \
See also \fB\-\-pathspec\-file\-nul\fR.
.RE

.PP
\fB\-\-pathspec\-file\-nul\fR
.RS 4
This options is only valid for \fBpush\fR command.
.sp
Only meaningful with \fB\-\-pathspec\-from\-file\fR. \
Pathspec elements are separated with NUL character and all other characters are taken literally (including newlines and quotes).
.RE

.PP
\fB\-S\fR, \fB\-\-staged\fR
.RS 4
This options is only valid for \fBpush\fR command.
.sp
All changes that are tracked but not yet added to the index are not staged and left intact. \
See also \fB\-\-leave\-staged\fR.
.RE

.PP
\fB\-u\fR, \fB\-\-include\-untracked\fR, \fB\-\-no\-include\-untracked\fR
.RS 4
This options is only valid for \fBpush\fR command.
.sp
All untracked files are also stashed and then removed.
.br
\fB\-\-no\-include\-untracked\fR also affect \fB\-\-all\fR, resulting in stashing and removing only ignored files.
.RE

.PP
\fB\-\-continue\fR
.RS 4
This options is only valid for \fBapply\fR and \fBpop\fR commands.
.sp
Resume the operation after conflicts have been resolved.
.RE

.PP
\fB\-\-abort\fR
.RS 4
This options is only valid for \fBapply\fR and \fBpop\fR commands.
.sp
Cancel the operation and restore the repository to the state before it started.
.RE

.PP
\fB\-h\fR
.RS 4
Print a rudimentary help text to stdout.
.sp
This is a fallback option that is to be used when the man page is not available. \
Prefer \fBgit help istash\fR over \fBgit istash [<sub-command>] \-h\fR.
.RE

.PP
\fB\--help\fR
.RS 4
Display the man page for \fBgit\~istash\fR.
.sp
Normally this option is handled by the Git itself, but passing it directly to the script \fBgit-istash\fR also works, and additionally it has a fallback to the option \fB-h\fR in case that running the man viewer failed for any reason.
.RE

.PP
\fB\-\-version\fR
.RS 4
Display version information for the script.
.RE

.PP
\fB\-\-\fR
.RS 4
Separates options from non-option arguments (like stash or pathspec) for disambiguation purposes.
.RE

.PP
\fB<pathspec>...\fR
.RS 4
This options is only valid for \fBpush\fR command.
.sp
The new stash entry records the modified states and roll back only for the files that match the pathspec.
.sp
For more details, see the \fIpathspec\fR entry in \fBgitglossary\fR(7).
.RE

.PP
\fB<stash>\fR
.RS 4
This option is only valid for \fBapply\fR and \fBpop\fR commands.
.sp
A reference of the form \fBstash@{<revision>}\fR or \fBstash^{/<name>}\fR. \
In case of \fBapply\fR an arbitrary commit is allowed, as long as it looks like a stash entry.
.br
When no \fB<stash>\fR is given, the latest stash is assumed (that is, \fBstash@{0}\fR).
.RE

.SH EXIT CODES
.nf
\fB0\fR - command succeeded
\fB1\fR - command failed
\fB2\fR - command was stopped by a conflict and can be resumed with \fB\-\-continue\fR or aborted with \fB\-\-abort\fR (only \fBapply\fR and \fBpop\fR)
.fi

.SH EXAMPLES

.PP
Interrupted workflow, without loosing index
.RS 4
When you are in the middle of something and you suddenly have a \fIbrilliant idea\fR for something that should be changed \fIimmediately\fR, even before the things you're working on currently. \
Traditionally, you would make a commit to a temporary branch to store your changes away, and return to your original branch to implement your awesome idea, like this:
.sp
.RS 4
.nf
# ... hack hack hack ...
$ git switch \-c my_wip
$ git commit \-a \-m "WIP"
$ git switch original_branch
# Implement the idea
$ git commit \-a \-m "Best change ever"
$ git switch my_wip
$ git rebase original_branch
$ git reset \-\-soft HEAD^
$ git branch \-D original_branch
$ git branch \-m original_branch
# ... continue hacking ...
.fi
.RE
.sp
The above is complicated and has a lot of steps that can break something if you make a mistake. \
Additionally, it doesn't preserve the index.
.sp
You can use \fBgit istash\fR to simplify it \fIand\fR keep the index intact:
.sp
.RS 4
.nf
# ... hack hack hack ...
$ git istash
# Implement the idea
$ git commit \-a \-m "Best change ever"
$ git istash pop
# ... continue hacking ...
.fi
.RE
.RE

.PP
Applying stash with conflicts both in staged and unstaged changes
.RS 4
So far, you may be thinking: \
"Why would I need a custom Git script for that since a normal stash command can do it as well?"
.br
Let's assume the same scenario as in the example above; however, this time the \fIbrilliant idea\fR involves editing some of the same lines that are currently changed.
.sp
In such situation, normal \fBgit stash\fR won't let you use the option \fB\-\-index\fR, forcing you to discard your changes in index.
.br
When \fBgit istash\fR encounters conflicts, it behaves like \fBgit rebase\fR and stops to allow the user to deal with the problem. \
(Actually, it uses \fBrebase\fR under the hood.)
.sp
.RS 4
.nf
# ... hack hack hack ...
$ git istash
# Implement the idea
$ git commit \-a \-m "Best change ever"
$ git istash pop
# (git\-istash will stop and report that some files have conflicts)
# Fix the conflicts in the index
$ git add \-u
$ git istash pop \-\-continue
# (git\-istash will stop and report that some files have conflicts again)
# Fix the conflicts in unstaged changes
$ git add \-u
$ git istash pop \-\-continue
# ... continue hacking ...
.fi
.RE
.sp
After the whole operation is finished, the stashed index is restored and intact.
.RE

.PP
Stashing away untracked files
.RS 4
You've created a few new files yet to be added to the repository but you've realized that you will need them a little later and they are getting in the way of what you're doing right now.
.sp
You would like to move them somewhere where they won't bother you for now, but keep them safe.
.sp
.RS 4
.nf
# ... hack hack hack ...
$ git istash push \-\-leave\-staged \-\-staged \-\-include\-untracked \-m 'some new files, for safe keeping'
# (or just "git istash push \-lSu")
# ... continue hacking until the files are needed ...
$ git istash pop
# ... hacking intensifies ...
.fi
.RE
.RE

.SH SEE ALSO
\fBgit\-stash\fR(1), \fBgit\-rebase\fR(1)

.SH CURRENT LIMITATIONS
.PP
Files added with the flag \fB-N\fR / \fB--intend-to-add\fR are not supported. \
(This will be implemented next, since it's one of the main goals of the project.)
.PP
It is not possible to \fBapply\fR or \fBpop\fR stash on top of existing changes in the working copy. \
All modified files need to be restored or stashed away before starting the process.

.SH AUTHOR
git\-istash was written by Piotr Siupa. (\fIpiotr.siupa+stash@gmail.com\fR)
.sp
The command and everything around it was strongly inspired by Git (quite obviously).

is_color_allowed() { # stream_num
	case "$(git config --get color.ui)" in
		always|true|1) return 0 ;;
		never|false|0) return 1 ;;
		*)             test -t "$1" ;;
	esac
}

make_data_file_path() { # name
	git rev-parse --git-dir | tr -d '\n'
	printf '/istash %s' "$1" | tr ' a-z' '_A-Z'
}
make_target_data_file_path() {
	make_data_file_path 'target'
}
make_stash_data_file_path() {
	make_data_file_path 'stash'
}

find_data_files() {
	if [ -f "$(make_target_data_file_path)" ]
	then
		if [ -f "$(make_stash_data_file_path)" ]
		then
			printf 'pop'
		else
			printf 'apply'
		fi
	else
		if [ -f "$(make_stash_data_file_path)" ]
		then
			printf 'error'
		else
			printf 'nothing'
		fi
	fi
}

check_args() { # max_free_args args...
	_script_name="$1"
	_max_free_args="$2"
	shift 2
	if [ $# -gt "$_max_free_args" ]
	then
		printf 'error: Too many arguments.\n' 1>&2
		printf 'error: Type "git %s --help" for more information.\n' "$_script_name" 1>&2
		return 1
	fi
}

check_repository_state() {
	if [ -n "$(git status --porcelain)" ]
	then
		# There are still are some limitations.
		printf 'error: There are uncommitted changes in the working directory.\n' 1>&2
		printf 'error: Please commit or stash them.\n' 1>&2
		return 1
	fi
}

check_other_git_commands_state() {
	git_dir="$(git rev-parse --git-dir)"
	if [ -e "$git_dir/rebase-apply" ] || [ -e "$git_dir/rebase-merge" ]
	then
		printf 'error: There is currently a rebase in progress.\n' 1>&2
		return 1
	fi
	if [ -e "$git_dir/MERGE_HEAD" ]
	then
		printf 'error: There is currently a merge in progress.\n' 1>&2
		return 1
	fi
}

get_stash_commit() { # stash
	if [ "$1" -eq "$1" ] 2>/dev/null
	then
		printf '%s' "stash@{$1}"
	else
		printf '%s' "$1"
	fi
}

find_stash() { # [arg]
	if [ $# -eq 0 ] || [ "$1" = 'stash' ]
	then
		stash=0
	elif [ "$1" -eq "$1" ] 2>/dev/null
	then
		if [ "$1" -ge 0 ]
		then
			stash=$1
		else
			stash=$(($(git rev-list --walk-reflogs --count --ignore-missing refs/stash) + $1))
		fi
	elif printf '%s' "$1" | grep -xqE 'stash\^\{/.*\}'
	then
		stash_text="$(printf '%s' "$1" | sed -E 's/^stash\^\{\/(.*)\}$/\1/')"
		stash_hash="$(git rev-list --walk-reflogs --grep-reflog="$stash_text" --ignore-missing refs/stash | head -n1)"
		stash="$(($(git rev-list --walk-reflogs refs/stash | grep -Fxn "$stash_hash" | cut -d: -f1) - 1))"
	elif printf '%s' "$1" | grep -xqE 'stash@\{[0-9]+\}'
	then
		stash="$(printf '%s' "$1" | sed -E 's/^stash@\{(.*)\}$/\1/')"
	else
		stash="$1"
	fi
	check_stash "$stash"
}

check_stash() { # stash
	stash_commit="$(get_stash_commit "$1")"
	if ! git rev-parse --quiet --verify "$stash_commit^{commit}" 1>/dev/null
	then
		printf 'fatal: There is no commit "%s".\n' "$stash_commit" 1>&2
		return 1
	fi
	parents_num="$(git rev-list --no-walk --count "$stash_commit^@")"
	if [ "$parents_num" -lt 2 ] || [ "$parents_num" -gt 3 ]
	then
		printf 'fatal: "%s" should have 2 or 3 parents to be a stash.\n' "$stash_commit" 1>&2
		return 1
	fi
	if [ "$parents_num" -eq 3 ] && [ "$(git rev-list --no-walk --count "$stash_commit^3^@")" -ne 0 ]
	then
		printf 'fatal: "%s^3" should have no parents to be a part of a stash.\n' "$stash_commit" 1>&2
		return 1
	fi
	if [ "$(git rev-list --no-walk --count "$stash_commit^2^@")" -ne 1 ]
	then
		printf 'fatal: The commit "%s^2" should have one parent to be a part of a stash.\n' "$stash_commit" 1>&2
		return 1
	fi
	if [ "$(git rev-parse "$stash_commit^1")" != "$(git rev-parse "$stash_commit^2^")" ]
	then
		printf 'fatal: The commit "%s^1" should be the parent of "%s^2" to be a part of a stash.\n' "$stash_commit" "$stash_commit" 1>&2
		return 1
	fi
	correct_commit_msgs=0
	if [ "$parents_num" -eq 3 ] && git rev-list --format='%B' --max-count=1 "$stash_commit^3" | head -n 2 | tail -n 1 | grep -qE '^untracked files on .+:'
	then
		correct_commit_msgs=$((correct_commit_msgs + 1))
	fi
	if git rev-list --format='%B' --max-count=1 "$stash_commit^2" | head -n 2 | tail -n 1 | grep -qE '^index on .+:'
	then
		correct_commit_msgs=$((correct_commit_msgs + 1))
	fi
	if git rev-list --format='%B' --max-count=1 "$stash_commit" | head -n 2 | tail -n 1 | grep -qE '^(WIP on|On) .+:'
	then
		correct_commit_msgs=$((correct_commit_msgs + 1))
	fi
	if [ $correct_commit_msgs -ne "$parents_num" ]
	then
		if [ $correct_commit_msgs -eq 0 ]
		then
			printf 'error: "%s"'\''s commits don'\''t have correct messages for stash.\n' "$stash_commit" 1>&2
		else
			printf 'error: some of "%s"'\'' commits don'\''t have correct messages for stash.\n' "$stash_commit" 1>&2
		fi
		printf 'error: It may not be a stash entry or it may be damaged.\n'
		return 1
	fi
}

find_current_branch() {
	if git rev-parse HEAD >/dev/null 2>&1
	then
		current_branch="$(git rev-parse --abbrev-ref HEAD)"
		curr_branch_type='normal'
		if [ "$current_branch" = 'HEAD' ]
		then
			current_branch="$(git rev-parse HEAD)"
			curr_branch_type='detached'
		fi
	else
		current_branch="$(git branch --show-current)"
		#shellcheck disable=SC2034
		curr_branch_type='orphan'
	fi
}

are_there_conflicts() {
	git status --porcelain | grep -qE '^.U|^U.'
}

parse_git_bool() { # boolean_to_parse
     test "$(git -c 'istash.bool-parsing-tmp-value'="$1" config --get --type=bool 'istash.bool-parsing-tmp-value' 2>/dev/null)" = 'true'
}

set_getopt_options_from_make_command() {
	getopt_short_options="$(sed -E -n 's/^\s*getopt_short_options='\''([^'\'']+)'\''\s*$/\1/p' "$(dirname "$0")/git-istash-make-stash")"
	getopt_long_options="$(sed -E -n 's/^\s*getopt_long_options='\''([^'\'']+)'\''\s*$/\1/p' "$(dirname "$0")/git-istash-make-stash")"
	if [ "$(printf '%s\n' "$getopt_short_options" | wc -l)" -ne 1 ] || [ "$(printf '%s\n' "$getopt_long_options" | wc -l)" -ne 1 ]
	then
		printf 'fatal: cannot determine if there is option "-h" in the arguments\n' 1>&2
		return 1
	fi
}

check_for_option_h_in_make_command() ( # option...
	if ! set_getopt_options_from_make_command
	then
		return 0  # Fall back to showing help, to not accidentaly break the repository.
	fi
	getopt_result="$(getopt -o"-$getopt_short_options" --long="$getopt_long_options" -n"$(basename "$0")" -ssh -- "$@")"
	eval set -- "$getopt_result"
	while [ $# -ne 0 ]
	do
		if [ "$1" = '-h' ]
		then
			return 0
		fi
		shift
	done
	return 1
)

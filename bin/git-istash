#!/usr/bin/env sh

set -e

print_help() {
	printf 'git istash - Improved version of "git stash" that can handle more corner cases.\n'
	printf '    (See "--help" of individual sub-commands.)\n'
	printf '\n'
	printf 'This is only a rudimentary help text. Prefer "git help istash" if available.\n'
	printf '\n'
	printf 'Usage: git istash <sub-command> [<argument>...]\n'
	printf '   or: git istash -h\n'
	printf '   or: git istash --version\n'
	printf '\n'
	printf 'Options:\n'
	printf '    -h\t\t\t- Show this help text and exit.\n'
	printf '\t--version\t- Show version information and exit.\n'
	printf '\n'
	printf 'Sub-commands:\n'
	printf '\tapply\t- Analog to "git stash apply --index".\n'
	printf '\tpop\t- Analog to "git stash pop --index".\n'
}

print_version() {
	printf 'git-istash version 1.0.1\n'
	printf 'Author: Piotr Siupa\n'
}

run_subcommand() { # subcommand [arguments...]
	subcommand="$1"
	shift
	subcommand_path="$(dirname "$0")/../lib/git-istash/git-istash-$subcommand"
	if [ ! -f "$subcommand_path" ] || [ ! -x "$subcommand_path" ]
	then
		printf 'git-istash: "%s" is not a sub-command. See "git istash --help".\n' "$subcommand" 1>&2
		return 1
	fi
	sh "$subcommand_path" "$@"
}

show_manual() {
	if [ -f "$(dirname "$0")/../man/man1/git-istash.1" ]
	then
		if (
			cd "$(dirname "$0")/../man"
			MANPATH="$(pwd)"
			export MANPATH
			man git-istash
		)
		then
			return 0
		fi
	fi
	if man git-istash
	then
		return 0
	fi
	printf 'Unable to open the manual entry.\n' 1>&2
	printf 'Falling back to the built-in help text.\n' 1>&2
	printf '\n' 1>&2
	return 1
}

if [ "$1" = '--help' ] || [ "$2" = '--help' ]
then
	if show_manual
	then
		exit 0
	else
		if [ "$1" = '--help' ]
		then
			print_help
			exit 0
		else
			eval set -- "$1" -h
		fi
	fi
elif [ "$1" = '-h' ] || [ "$1" = '--help' ]
then
	print_help
	exit 0
elif [ "$1" = '--version' ] || [ "$2" = '--version' ]
then
	print_version
	exit 0
fi

if [ $# -eq 0 ] || printf '%s' "$1" | grep -Eq '^-'
then
	set -- 'push' '--_implicit-push_' "$@"
fi
run_subcommand "$@"
